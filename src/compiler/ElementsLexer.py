# Generated from Elements.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,197,8,27,1,28,4,28,
        200,8,28,11,28,12,28,201,1,29,4,29,205,8,29,11,29,12,29,206,1,29,
        1,29,4,29,211,8,29,11,29,12,29,212,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,228,8,31,1,32,4,32,231,8,
        32,11,32,12,32,232,1,33,1,33,5,33,237,8,33,10,33,12,33,240,9,33,
        1,34,1,34,4,34,244,8,34,11,34,12,34,245,1,35,1,35,1,35,1,36,1,36,
        1,36,5,36,254,8,36,10,36,12,36,257,9,36,1,36,1,36,1,36,1,36,5,36,
        263,8,36,10,36,12,36,266,9,36,1,36,3,36,269,8,36,1,37,1,37,5,37,
        273,8,37,10,37,12,37,276,9,37,1,37,1,37,1,38,4,38,281,8,38,11,38,
        12,38,282,1,38,1,38,2,255,264,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,
        6,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,
        57,65,70,97,102,2,0,10,10,13,13,3,0,9,10,13,13,32,32,303,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,
        5,83,1,0,0,0,7,85,1,0,0,0,9,88,1,0,0,0,11,90,1,0,0,0,13,92,1,0,0,
        0,15,95,1,0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,103,1,0,0,0,23,105,
        1,0,0,0,25,108,1,0,0,0,27,112,1,0,0,0,29,115,1,0,0,0,31,117,1,0,
        0,0,33,119,1,0,0,0,35,125,1,0,0,0,37,127,1,0,0,0,39,129,1,0,0,0,
        41,133,1,0,0,0,43,137,1,0,0,0,45,142,1,0,0,0,47,148,1,0,0,0,49,156,
        1,0,0,0,51,165,1,0,0,0,53,170,1,0,0,0,55,196,1,0,0,0,57,199,1,0,
        0,0,59,204,1,0,0,0,61,214,1,0,0,0,63,227,1,0,0,0,65,230,1,0,0,0,
        67,234,1,0,0,0,69,241,1,0,0,0,71,247,1,0,0,0,73,268,1,0,0,0,75,270,
        1,0,0,0,77,280,1,0,0,0,79,80,5,43,0,0,80,2,1,0,0,0,81,82,5,45,0,
        0,82,4,1,0,0,0,83,84,5,47,0,0,84,6,1,0,0,0,85,86,5,47,0,0,86,87,
        5,47,0,0,87,8,1,0,0,0,88,89,5,42,0,0,89,10,1,0,0,0,90,91,5,94,0,
        0,91,12,1,0,0,0,92,93,5,61,0,0,93,94,5,61,0,0,94,14,1,0,0,0,95,96,
        5,33,0,0,96,97,5,61,0,0,97,16,1,0,0,0,98,99,5,60,0,0,99,18,1,0,0,
        0,100,101,5,60,0,0,101,102,5,61,0,0,102,20,1,0,0,0,103,104,5,62,
        0,0,104,22,1,0,0,0,105,106,5,62,0,0,106,107,5,61,0,0,107,24,1,0,
        0,0,108,109,5,97,0,0,109,110,5,110,0,0,110,111,5,100,0,0,111,26,
        1,0,0,0,112,113,5,111,0,0,113,114,5,114,0,0,114,28,1,0,0,0,115,116,
        5,40,0,0,116,30,1,0,0,0,117,118,5,41,0,0,118,32,1,0,0,0,119,120,
        5,115,0,0,120,121,5,116,0,0,121,122,5,100,0,0,122,123,5,105,0,0,
        123,124,5,110,0,0,124,34,1,0,0,0,125,126,5,44,0,0,126,36,1,0,0,0,
        127,128,5,186,0,0,128,38,1,0,0,0,129,130,5,100,0,0,130,131,5,101,
        0,0,131,132,5,103,0,0,132,40,1,0,0,0,133,134,5,114,0,0,134,135,5,
        97,0,0,135,136,5,100,0,0,136,42,1,0,0,0,137,138,5,108,0,0,138,139,
        5,101,0,0,139,140,5,102,0,0,140,141,5,116,0,0,141,44,1,0,0,0,142,
        143,5,114,0,0,143,144,5,105,0,0,144,145,5,103,0,0,145,146,5,104,
        0,0,146,147,5,116,0,0,147,46,1,0,0,0,148,149,5,102,0,0,149,150,5,
        111,0,0,150,151,5,114,0,0,151,152,5,119,0,0,152,153,5,97,0,0,153,
        154,5,114,0,0,154,155,5,100,0,0,155,48,1,0,0,0,156,157,5,98,0,0,
        157,158,5,97,0,0,158,159,5,99,0,0,159,160,5,107,0,0,160,161,5,119,
        0,0,161,162,5,97,0,0,162,163,5,114,0,0,163,164,5,100,0,0,164,50,
        1,0,0,0,165,166,5,100,0,0,166,167,5,111,0,0,167,168,5,119,0,0,168,
        169,5,110,0,0,169,52,1,0,0,0,170,171,5,117,0,0,171,172,5,112,0,0,
        172,54,1,0,0,0,173,174,5,114,0,0,174,175,5,101,0,0,175,176,5,97,
        0,0,176,197,5,108,0,0,177,178,5,99,0,0,178,179,5,97,0,0,179,180,
        5,110,0,0,180,181,5,118,0,0,181,182,5,97,0,0,182,197,5,115,0,0,183,
        184,5,105,0,0,184,185,5,110,0,0,185,197,5,116,0,0,186,187,5,115,
        0,0,187,188,5,116,0,0,188,189,5,114,0,0,189,190,5,105,0,0,190,191,
        5,110,0,0,191,197,5,103,0,0,192,193,5,98,0,0,193,194,5,111,0,0,194,
        195,5,111,0,0,195,197,5,108,0,0,196,173,1,0,0,0,196,177,1,0,0,0,
        196,183,1,0,0,0,196,186,1,0,0,0,196,192,1,0,0,0,197,56,1,0,0,0,198,
        200,7,0,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,
        202,1,0,0,0,202,58,1,0,0,0,203,205,7,0,0,0,204,203,1,0,0,0,205,206,
        1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,210,
        5,46,0,0,209,211,7,0,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,
        1,0,0,0,212,213,1,0,0,0,213,60,1,0,0,0,214,215,3,57,28,0,215,216,
        5,47,0,0,216,217,3,57,28,0,217,62,1,0,0,0,218,219,5,116,0,0,219,
        220,5,114,0,0,220,221,5,117,0,0,221,228,5,101,0,0,222,223,5,102,
        0,0,223,224,5,97,0,0,224,225,5,108,0,0,225,226,5,115,0,0,226,228,
        5,101,0,0,227,218,1,0,0,0,227,222,1,0,0,0,228,64,1,0,0,0,229,231,
        7,1,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,
        1,0,0,0,233,66,1,0,0,0,234,238,3,65,32,0,235,237,7,2,0,0,236,235,
        1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,68,1,
        0,0,0,240,238,1,0,0,0,241,243,5,35,0,0,242,244,7,3,0,0,243,242,1,
        0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,70,1,0,
        0,0,247,248,5,92,0,0,248,249,9,0,0,0,249,72,1,0,0,0,250,255,5,34,
        0,0,251,254,9,0,0,0,252,254,3,71,35,0,253,251,1,0,0,0,253,252,1,
        0,0,0,254,257,1,0,0,0,255,256,1,0,0,0,255,253,1,0,0,0,256,258,1,
        0,0,0,257,255,1,0,0,0,258,269,5,34,0,0,259,264,5,39,0,0,260,263,
        9,0,0,0,261,263,3,71,35,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,
        1,0,0,0,264,265,1,0,0,0,264,262,1,0,0,0,265,267,1,0,0,0,266,264,
        1,0,0,0,267,269,5,39,0,0,268,250,1,0,0,0,268,259,1,0,0,0,269,74,
        1,0,0,0,270,274,5,37,0,0,271,273,8,4,0,0,272,271,1,0,0,0,273,276,
        1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,
        1,0,0,0,277,278,6,37,0,0,278,76,1,0,0,0,279,281,7,5,0,0,280,279,
        1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,284,
        1,0,0,0,284,285,6,38,0,0,285,78,1,0,0,0,16,0,196,201,206,212,227,
        232,238,245,253,255,262,264,268,274,282,1,6,0,0
    ]

class ElementsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    Type = 28
    INT = 29
    FLOAT = 30
    FRACTION = 31
    BOOL = 32
    Word = 33
    Name = 34
    HexaColor = 35
    ESC = 36
    STRING = 37
    Comment = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'/'", "'//'", "'*'", "'^'", "'=='", "'!='", "'<'", 
            "'<='", "'>'", "'>='", "'and'", "'or'", "'('", "')'", "'stdin'", 
            "','", "'\\u00BA'", "'deg'", "'rad'", "'left'", "'right'", "'forward'", 
            "'backward'", "'down'", "'up'" ]

    symbolicNames = [ "<INVALID>",
            "Type", "INT", "FLOAT", "FRACTION", "BOOL", "Word", "Name", 
            "HexaColor", "ESC", "STRING", "Comment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "Type", "INT", "FLOAT", "FRACTION", "BOOL", "Word", 
                  "Name", "HexaColor", "ESC", "STRING", "Comment", "WS" ]

    grammarFileName = "Elements.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


