# Generated from Class.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,353,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,3,33,264,8,33,1,34,4,34,267,8,34,11,34,
        12,34,268,1,35,4,35,272,8,35,11,35,12,35,273,1,35,1,35,4,35,278,
        8,35,11,35,12,35,279,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,3,37,295,8,37,1,38,4,38,298,8,38,11,38,12,38,
        299,1,39,1,39,5,39,304,8,39,10,39,12,39,307,9,39,1,40,1,40,4,40,
        311,8,40,11,40,12,40,312,1,41,1,41,1,41,1,42,1,42,1,42,5,42,321,
        8,42,10,42,12,42,324,9,42,1,42,1,42,1,42,1,42,5,42,330,8,42,10,42,
        12,42,333,9,42,1,42,3,42,336,8,42,1,43,1,43,5,43,340,8,43,10,43,
        12,43,343,9,43,1,43,1,43,1,44,4,44,348,8,44,11,44,12,44,349,1,44,
        1,44,2,322,331,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,1,0,6,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,48,57,65,70,97,102,2,0,10,10,13,13,3,0,9,10,13,13,
        32,32,370,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,1,91,1,0,0,0,3,98,1,0,0,0,5,105,1,0,0,0,7,109,1,0,0,0,9,111,
        1,0,0,0,11,113,1,0,0,0,13,115,1,0,0,0,15,121,1,0,0,0,17,123,1,0,
        0,0,19,132,1,0,0,0,21,144,1,0,0,0,23,154,1,0,0,0,25,163,1,0,0,0,
        27,167,1,0,0,0,29,169,1,0,0,0,31,172,1,0,0,0,33,174,1,0,0,0,35,176,
        1,0,0,0,37,178,1,0,0,0,39,180,1,0,0,0,41,182,1,0,0,0,43,184,1,0,
        0,0,45,186,1,0,0,0,47,192,1,0,0,0,49,194,1,0,0,0,51,196,1,0,0,0,
        53,200,1,0,0,0,55,204,1,0,0,0,57,209,1,0,0,0,59,215,1,0,0,0,61,223,
        1,0,0,0,63,232,1,0,0,0,65,237,1,0,0,0,67,263,1,0,0,0,69,266,1,0,
        0,0,71,271,1,0,0,0,73,281,1,0,0,0,75,294,1,0,0,0,77,297,1,0,0,0,
        79,301,1,0,0,0,81,308,1,0,0,0,83,314,1,0,0,0,85,335,1,0,0,0,87,337,
        1,0,0,0,89,347,1,0,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,94,5,102,
        0,0,94,95,5,105,0,0,95,96,5,110,0,0,96,97,5,101,0,0,97,2,1,0,0,0,
        98,99,5,99,0,0,99,100,5,97,0,0,100,101,5,110,0,0,101,102,5,118,0,
        0,102,103,5,97,0,0,103,104,5,115,0,0,104,4,1,0,0,0,105,106,5,112,
        0,0,106,107,5,101,0,0,107,108,5,110,0,0,108,6,1,0,0,0,109,110,5,
        123,0,0,110,8,1,0,0,0,111,112,5,59,0,0,112,10,1,0,0,0,113,114,5,
        125,0,0,114,12,1,0,0,0,115,116,5,99,0,0,116,117,5,111,0,0,117,118,
        5,108,0,0,118,119,5,111,0,0,119,120,5,114,0,0,120,14,1,0,0,0,121,
        122,5,61,0,0,122,16,1,0,0,0,123,124,5,112,0,0,124,125,5,111,0,0,
        125,126,5,115,0,0,126,127,5,105,0,0,127,128,5,116,0,0,128,129,5,
        105,0,0,129,130,5,111,0,0,130,131,5,110,0,0,131,18,1,0,0,0,132,133,
        5,111,0,0,133,134,5,114,0,0,134,135,5,105,0,0,135,136,5,101,0,0,
        136,137,5,110,0,0,137,138,5,116,0,0,138,139,5,97,0,0,139,140,5,116,
        0,0,140,141,5,105,0,0,141,142,5,111,0,0,142,143,5,110,0,0,143,20,
        1,0,0,0,144,145,5,116,0,0,145,146,5,104,0,0,146,147,5,105,0,0,147,
        148,5,99,0,0,148,149,5,107,0,0,149,150,5,110,0,0,150,151,5,101,0,
        0,151,152,5,115,0,0,152,153,5,115,0,0,153,22,1,0,0,0,154,155,5,112,
        0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,115,0,0,158,159,
        5,115,0,0,159,160,5,117,0,0,160,161,5,114,0,0,161,162,5,101,0,0,
        162,24,1,0,0,0,163,164,5,110,0,0,164,165,5,101,0,0,165,166,5,119,
        0,0,166,26,1,0,0,0,167,168,5,47,0,0,168,28,1,0,0,0,169,170,5,47,
        0,0,170,171,5,47,0,0,171,30,1,0,0,0,172,173,5,42,0,0,173,32,1,0,
        0,0,174,175,5,37,0,0,175,34,1,0,0,0,176,177,5,43,0,0,177,36,1,0,
        0,0,178,179,5,45,0,0,179,38,1,0,0,0,180,181,5,94,0,0,181,40,1,0,
        0,0,182,183,5,40,0,0,183,42,1,0,0,0,184,185,5,41,0,0,185,44,1,0,
        0,0,186,187,5,115,0,0,187,188,5,116,0,0,188,189,5,100,0,0,189,190,
        5,105,0,0,190,191,5,110,0,0,191,46,1,0,0,0,192,193,5,44,0,0,193,
        48,1,0,0,0,194,195,5,186,0,0,195,50,1,0,0,0,196,197,5,100,0,0,197,
        198,5,101,0,0,198,199,5,103,0,0,199,52,1,0,0,0,200,201,5,114,0,0,
        201,202,5,97,0,0,202,203,5,100,0,0,203,54,1,0,0,0,204,205,5,108,
        0,0,205,206,5,101,0,0,206,207,5,102,0,0,207,208,5,116,0,0,208,56,
        1,0,0,0,209,210,5,114,0,0,210,211,5,105,0,0,211,212,5,103,0,0,212,
        213,5,104,0,0,213,214,5,116,0,0,214,58,1,0,0,0,215,216,5,102,0,0,
        216,217,5,111,0,0,217,218,5,114,0,0,218,219,5,119,0,0,219,220,5,
        97,0,0,220,221,5,114,0,0,221,222,5,100,0,0,222,60,1,0,0,0,223,224,
        5,98,0,0,224,225,5,97,0,0,225,226,5,99,0,0,226,227,5,107,0,0,227,
        228,5,119,0,0,228,229,5,97,0,0,229,230,5,114,0,0,230,231,5,100,0,
        0,231,62,1,0,0,0,232,233,5,100,0,0,233,234,5,111,0,0,234,235,5,119,
        0,0,235,236,5,110,0,0,236,64,1,0,0,0,237,238,5,117,0,0,238,239,5,
        112,0,0,239,66,1,0,0,0,240,241,5,114,0,0,241,242,5,101,0,0,242,243,
        5,97,0,0,243,264,5,108,0,0,244,245,5,99,0,0,245,246,5,97,0,0,246,
        247,5,110,0,0,247,248,5,118,0,0,248,249,5,97,0,0,249,264,5,115,0,
        0,250,251,5,105,0,0,251,252,5,110,0,0,252,264,5,116,0,0,253,254,
        5,115,0,0,254,255,5,116,0,0,255,256,5,114,0,0,256,257,5,105,0,0,
        257,258,5,110,0,0,258,264,5,103,0,0,259,260,5,98,0,0,260,261,5,111,
        0,0,261,262,5,111,0,0,262,264,5,108,0,0,263,240,1,0,0,0,263,244,
        1,0,0,0,263,250,1,0,0,0,263,253,1,0,0,0,263,259,1,0,0,0,264,68,1,
        0,0,0,265,267,7,0,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,
        0,0,0,268,269,1,0,0,0,269,70,1,0,0,0,270,272,7,0,0,0,271,270,1,0,
        0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,275,1,0,
        0,0,275,277,5,46,0,0,276,278,7,0,0,0,277,276,1,0,0,0,278,279,1,0,
        0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,72,1,0,0,0,281,282,3,69,
        34,0,282,283,5,47,0,0,283,284,3,69,34,0,284,74,1,0,0,0,285,286,5,
        116,0,0,286,287,5,114,0,0,287,288,5,117,0,0,288,295,5,101,0,0,289,
        290,5,102,0,0,290,291,5,97,0,0,291,292,5,108,0,0,292,293,5,115,0,
        0,293,295,5,101,0,0,294,285,1,0,0,0,294,289,1,0,0,0,295,76,1,0,0,
        0,296,298,7,1,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,
        0,299,300,1,0,0,0,300,78,1,0,0,0,301,305,3,77,38,0,302,304,7,2,0,
        0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,
        0,306,80,1,0,0,0,307,305,1,0,0,0,308,310,5,35,0,0,309,311,7,3,0,
        0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,
        0,313,82,1,0,0,0,314,315,5,92,0,0,315,316,9,0,0,0,316,84,1,0,0,0,
        317,322,5,34,0,0,318,321,9,0,0,0,319,321,3,83,41,0,320,318,1,0,0,
        0,320,319,1,0,0,0,321,324,1,0,0,0,322,323,1,0,0,0,322,320,1,0,0,
        0,323,325,1,0,0,0,324,322,1,0,0,0,325,336,5,34,0,0,326,331,5,39,
        0,0,327,330,9,0,0,0,328,330,3,83,41,0,329,327,1,0,0,0,329,328,1,
        0,0,0,330,333,1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,0,332,334,1,
        0,0,0,333,331,1,0,0,0,334,336,5,39,0,0,335,317,1,0,0,0,335,326,1,
        0,0,0,336,86,1,0,0,0,337,341,5,37,0,0,338,340,8,4,0,0,339,338,1,
        0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,
        0,0,0,343,341,1,0,0,0,344,345,6,43,0,0,345,88,1,0,0,0,346,348,7,
        5,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,
        0,0,0,350,351,1,0,0,0,351,352,6,44,0,0,352,90,1,0,0,0,16,0,263,268,
        273,279,294,299,305,312,320,322,329,331,335,341,349,1,6,0,0
    ]

class ClassLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    Type = 34
    INT = 35
    FLOAT = 36
    FRACTION = 37
    BOOL = 38
    Word = 39
    Name = 40
    HexaColor = 41
    ESC = 42
    STRING = 43
    Comment = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'define'", "'canvas'", "'pen'", "'{'", "';'", "'}'", "'color'", 
            "'='", "'position'", "'orientation'", "'thickness'", "'pressure'", 
            "'new'", "'/'", "'//'", "'*'", "'%'", "'+'", "'-'", "'^'", "'('", 
            "')'", "'stdin'", "','", "'\\u00BA'", "'deg'", "'rad'", "'left'", 
            "'right'", "'forward'", "'backward'", "'down'", "'up'" ]

    symbolicNames = [ "<INVALID>",
            "Type", "INT", "FLOAT", "FRACTION", "BOOL", "Word", "Name", 
            "HexaColor", "ESC", "STRING", "Comment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "Type", "INT", "FLOAT", "FRACTION", "BOOL", "Word", 
                  "Name", "HexaColor", "ESC", "STRING", "Comment", "WS" ]

    grammarFileName = "Class.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


