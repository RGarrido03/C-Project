group Class;

createPenClass(className, classProps) ::= <<
class <className>(Pen):
    def __init__(self) -> None:
        <classProps; separator="\n">
        super().__init__()
>>

classProps(prop, expression) ::= "self.<prop> = <expression>"

arrowProps(variable, value1) ::= "<variable>.set_<value1>"

addOrSubPoint(variable, value1, value2) ::= "<variable>.<value1>_position(<value2>)"


object(variable, penType) ::= "<variable> = <if(penType)><penType><else>DefaultPen<endif>()"

createCanvasClass(canvasName, tuple, title) ::= "<canvasName> = Canvas(<title>,<tuple>)"

instructionCanvas(canvasName,tuple, title, color, setActive) ::= <<
<if(title)><canvasName>.set_title("<title>")
<endif>
<if(color)><canvasName>.set_background("<color>")
<endif>
<if(tuple)><canvasName>.set_dimension(<tuple>)
<endif>
<if(setActive)>Canvas.set_active(<canvasName>)
<endif>
>>