group pdraw;
import "Elements.stg"
import "Class.stg"

main(statements, classes) ::= <<
from abc import ABC, abstractmethod
import time
import sys


class Pen(ABC):
    @abstractmethod
    def __init__(self) -> None:
        # defaults
        self.color = "blue"
        self.thickness = 1
        self.position = (0, 0)
        self.orientation = 0

    @abstractmethod
    def another_methods(self): ...

<classes; separator="\n">

def main():
    <statements>

if __name__ == "__main__":
    main()

>>

other(text) ::= "<text>"

statement(something) ::=<<
<something>
>>

instruction(variable, action, angle, penAction) ::= <<
<if(moveAction)>
    <variable>.<action>(<angle>)
<else>
    <variable>.<action>()
<endif>
>>

assignment(assignVar, assignPen, reassignVar, variable, object, expression, type) ::= <<
<if(assignVar)>
<variable>: <type> = <expression>
<elseif(assignPen)>
<object>
<elseif(reassignVar)>
<variable> = <expression>
<endif>
>>


// Medium Level
cast(Type, expression) ::= <<
<Type>(<expression>)
>>

pause(INT) ::= <<
time.sleep(<INT>)
>>

print(expression, stdOut, stdErr) ::= <<
<if(stdOut)>
print(<expression>)
<elseif(stdErr)>
print(<expression>, file=sys.stderr)
<endif>
>>

input(text) ::= "input(<text>)"

execute(variable, String) ::= <<
    <variable> = eval(<String>)
>>

// problema, eu nao quero que a classe seja definida dentro da funcao main

createPenAndCreateClass(color, thickness, position, orientation, className) ::= <<
class <className>(Pen):
    def __init__(self) -> None:
        super().__init__()
        <if(color)>
        self.color = "<color>"
        <endif>
        <if(thickness)>
        self.thickness = <thickness>
        <endif>
        <if(position)>
        self.position = <position>
        <endif>
        <if(orientation)>
        self.orientation = <orientation>
        <endif>
>>



