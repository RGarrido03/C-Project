group pdraw;
import "Elements.stg"
import "Class.stg"

main(statements, classes) ::= <<
from abc import ABC, abstractmethod
import time
import sys
import turtle
import math



class Pen(ABC):
    def __init__(self) -> None:
        self.color = "blue"
        self.thickness = 1
        self.position = (0, 0)
        self.orientation = 0
        self.pressure = -1  # -1 means up
        self.turtle = turtle.Turtle()


    def forward(self, distance: float) -> None:
        if self.pressure >= 0:
            self.turtle.pendown()
        else:
            self.turtle.penup()
        self.turtle.forward(distance)
        self.update_position()

    def backward(self, distance: float) -> None:
        if self.pressure >= 0:
            self.turtle.pendown()
        else:
            self.turtle.penup()
        self.turtle.forward(-distance)
        self.update_position()

    def left(self, degrees: float) -> None:
        self.turtle.left(degrees)
        self.orientation = math.degrees(self.turtle.heading())

    def right(self, degrees: float) -> None:
        self.turtle.right(degrees)
        self.orientation = math.degrees(self.turtle.heading())

    def down(self) -> None:
        self.pressure = 0
        self.turtle.pendown()

    def up(self) -> None:
        self.pressure = -1
        self.turtle.penup()

    def update_position(self) -> None:
        self.position = self.turtle.position()

    def set_state(self):
        self.turtle.color(self.color)
        self.turtle.pensize(self.thickness)
        self.turtle.penup()
        self.turtle.setpos(self.position)
        self.turtle.setheading(self.orientation)
        if self.pressure >= 0:
            self.turtle.pendown()

class DefaultPen(Pen):
    def __init__(self) -> None:
        super().__init__()


<classes; separator="\n\n">

def main():
    <if(statements)>
    <statements>
    <else>
    pass
    <endif>

    turtle.done()

if __name__ == "__main__":
    main()

>>

other(text) ::= "<text>"

statement(something) ::=<<
<if(something)>
<something>
<endif>
>>

instruction(variable, action, value) ::= <<
<variable>.<action>(<value>)
>>

assignment(assignVar, assignPen, reassignVar, variable, object, expression, type) ::= <<
<if(assignVar)>
<variable>: <type> = <expression>
<elseif(assignPen)>
<object>
<elseif(reassignVar)>
<variable> = <expression>
<endif>
>>


// Medium Level
cast(Type, expression) ::= <<
<Type>(<expression>)
>>

pause(INT) ::= <<
time.sleep(<INT>)
>>

print(expression, stdErr) ::= <<
print(<expression><if(stdErr)>, file=sys.stderr<endif>)

>>

input(text) ::= "input(<text>)"

execute(variable, String) ::= <<
    <variable> = eval(<String>)
>>
