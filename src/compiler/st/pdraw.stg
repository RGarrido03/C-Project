group pdraw;
import "Elements.stg"
import "Class.stg"

main(statements, classes) ::= <<
from abc import ABC, abstractmethod
from antlr4 import FileStream, CommonTokenStream
import time
import sys
import turtle
import math

from lib import *
from interpeter import Interpreter
from ipdrawLexer import ipdrawLexer
from ipdrawParser import ipdrawParser


class DefaultPen(Pen):
    def __init__(self) -> None:
        super().__init__()


<classes; separator="\n\n">


def execute(filename: str, pen: Pen):
    input_stream = FileStream(filename, encoding='utf-8')
    lexer = ipdrawLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser = ipdrawParser(stream)
    tree = parser.main()
    visitor = Interpreter(pen)
    visitor.visit(tree)


<if(statements)>
<statements; separator="\n">
<else>
pass
<endif>

turtle.done()
print("Everything is done, please close the window.")

>>

expression(e1, op, e2) ::= "<e1> <op> <e2>"

parent(expression) ::= "(<expression>)"

other(text) ::= "<text>"

statement(something) ::= <%
<if(something)>
<something>
<endif>
%>

incdec(variable,op) ::= "(<variable>:=<variable><op>1)"

constants(constName)::="math.<constName>"

instruction(variable, action, value, fontsize) ::= "<variable>.<action>(<value><if(fontsize)>, <fontsize><endif>)"

arrayAdd(variable,index,value)::="<variable>[<index>]=<value>"

arrayRemove(variable,index)::="<variable>.pop(<index>)"

array(variable,elements)::=<<
<variable>=[<elements; separator=",">]
>>

arrayGetLength(variable)::="len(<variable>)"
arrayGetArray(variable,index)::="<variable>[<index>]"

instructionPipeline(statements) ::= <<
<statements; separator="\n">
>>

assignment(assignVar, assignPen, reassignVar, variable, object, expression, type) ::= <%
<if(assignVar)>
<variable>: <type> = <expression>
<elseif(assignPen)>
<object>
<elseif(reassignVar)>
<variable> = <expression>
<endif>
%>

cast(Type, expression) ::= "<Type>(<expression>)"

pause(INT) ::= "time.sleep(<INT>/1_000_000)"

print(expression, stdErr) ::= "print(<expression><if(stdErr)>, file=sys.stderr<endif>)"

input(text) ::= "input(<text>)"

if(condition, statements, elif, elseStat) ::= <<

if <condition>:
    <statements; separator="\n">
<if(elif)><elif; separator="\n"><endif>
<if(elseStat)><elseStat><endif>

>>

elif(condition, statements) ::= <<
elif <condition>:
    <statements; separator="\n">
>>

else(statements) ::= <<
else:
    <statements; separator="\n">
>>

while(assignment, condition, statements, isUntil) ::= <<

<if(assignment)><assignment><endif>
while <if(isUntil)>not<else><endif> (<condition>):
    <statements; separator="\n">

>>

execute(filename, pen) ::= "execute(<filename>, <pen>)"
