group pdraw;
import "Elements.stg"
import "Class.stg"

main(statements, classes) ::= <<
from abc import ABC, abstractmethod
import time
import sys
import turtle
import math
from lib import Pen

class DefaultPen(Pen):
    def __init__(self) -> None:
        super().__init__()

<classes; separator="\n\n">

<if(statements)>
<statements; separator="\n">
<else>
pass
<endif>

turtle.done()
>>

expression(e1, op, e2) ::= "<e1><op><e2>"

parent(expression) ::= "(<expression>)"

other(text) ::= "<text>"

statement(something) ::= <%
<if(something)>
<something>
<endif>
%>

instruction(variable, action, value) ::= "<variable>.<action>(<value>)"

assignment(assignVar, assignPen, reassignVar, variable, object, expression, type) ::= <%
<if(assignVar)>
<variable>: <type> = <expression>
<elseif(assignPen)>
<object>
<elseif(reassignVar)>
<variable> = <expression>
<endif>
%>

cast(Type, expression) ::= "<Type>(<expression>)"

pause(INT) ::= "time.sleep(<INT>/1000)"

print(expression, stdErr) ::= "print(<expression><if(stdErr)>, file=sys.stderr<endif>)"

input(text) ::= "input(<text>)"

if(condition, statements, elif, elseStat) ::= <<

if <condition>:
    <statements; separator="\n">
<if(elif)><elif; separator="\n"><endif>
<if(elseStat)><elseStat><endif>

>>

elif(condition, statements) ::= <<
elif <condition>:
    <statements; separator="\n">
>>

else(statements) ::= <<
else:
    <statements; separator="\n">
>>

while(condition, statements) ::= <<

while <condition>:
    <statements; separator="\n">

>>

condition(e1, e2, equals) ::= "<e1> <if(equals)>==<else>!=<endif> <e2>"

execute(variable, String) ::= <<
def execute(filename):
   ## TODO tem de ser um filestream !!!!
   input_stream = FileStream(filename, encoding='utf-8')
   lexer = ipdrawLexer(input_stream)
   stream = CommonTokenStream(lexer)
   parser = ipdrawParser(stream)
   tree = parser.execute()
>>